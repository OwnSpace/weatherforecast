// <auto-generated />
using System;
using WeatherForecast.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WeatherForecast.Migrations.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200308174206_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WeatherForecast.Domain.Models.Geo.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("IATA")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Models.Geo.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca30b8b2-6cae-4b2f-946c-177b62156aaf"),
                            Code = "RU",
                            Name = "Российская Федерация"
                        });
                });

            modelBuilder.Entity("WeatherForecast.Domain.Models.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("WeatherForecast");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Models.Geo.City", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Models.Geo.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WeatherForecast.Domain.Models.Common.Lifetime", "Lifetime", b1 =>
                        {
                            b1.Property<Guid>("CityId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnName("CreatedAt")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnName("DeletedAt")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnName("ModifiedAt")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("CityId");

                            b1.ToTable("City");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.OwnsOne("WeatherForecast.Domain.Models.Geo.GeoPoint", "GeoPoint", b1 =>
                        {
                            b1.Property<Guid>("CityId")
                                .HasColumnType("char(36)");

                            b1.Property<float>("Lat")
                                .HasColumnName("GeoPointLat")
                                .HasColumnType("float");

                            b1.Property<float>("Lng")
                                .HasColumnName("GeoPointLng")
                                .HasColumnType("float");

                            b1.HasKey("CityId");

                            b1.ToTable("City");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });
                });

            modelBuilder.Entity("WeatherForecast.Domain.Models.Geo.Country", b =>
                {
                    b.OwnsOne("WeatherForecast.Domain.Models.Common.Lifetime", "Lifetime", b1 =>
                        {
                            b1.Property<Guid>("CountryId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnName("CreatedAt")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnName("DeletedAt")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnName("ModifiedAt")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("CountryId");

                            b1.ToTable("Country");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");

                            b1.HasData(
                                new
                                {
                                    CountryId = new Guid("ca30b8b2-6cae-4b2f-946c-177b62156aaf"),
                                    CreatedAt = new DateTime(2020, 3, 8, 17, 42, 6, 128, DateTimeKind.Utc).AddTicks(323),
                                    ModifiedAt = new DateTime(2020, 3, 8, 17, 42, 6, 128, DateTimeKind.Utc).AddTicks(323)
                                });
                        });

                    b.OwnsOne("WeatherForecast.Domain.Models.Geo.GeoPoint", "GeoPoint", b1 =>
                        {
                            b1.Property<Guid>("CountryId")
                                .HasColumnType("char(36)");

                            b1.Property<float>("Lat")
                                .HasColumnName("GeoPointLat")
                                .HasColumnType("float");

                            b1.Property<float>("Lng")
                                .HasColumnName("GeoPointLng")
                                .HasColumnType("float");

                            b1.HasKey("CountryId");

                            b1.ToTable("Country");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });
                });

            modelBuilder.Entity("WeatherForecast.Domain.Models.WeatherForecast", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Models.Geo.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WeatherForecast.Domain.Models.CaseClasses.Precipitation", "Precipitation", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("char(36)");

                            b1.Property<float>("Value")
                                .HasColumnName("Precipitation")
                                .HasColumnType("float");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecast");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");
                        });

                    b.OwnsOne("WeatherForecast.Domain.Models.CaseClasses.Summary", "Summary", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("Summary")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecast");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");
                        });

                    b.OwnsOne("WeatherForecast.Domain.Models.CaseClasses.Temperature", "MaxTemperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("char(36)");

                            b1.Property<float>("Value")
                                .HasColumnName("MaxTemperature")
                                .HasColumnType("float");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecast");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");
                        });

                    b.OwnsOne("WeatherForecast.Domain.Models.CaseClasses.Temperature", "MinTemperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("char(36)");

                            b1.Property<float>("Value")
                                .HasColumnName("MinTemperature")
                                .HasColumnType("float");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecast");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");
                        });

                    b.OwnsOne("WeatherForecast.Domain.Models.CaseClasses.Wind", "Wind", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("char(36)");

                            b1.Property<float>("Value")
                                .HasColumnName("Wind")
                                .HasColumnType("float");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecast");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");
                        });

                    b.OwnsOne("WeatherForecast.Domain.Models.Common.Lifetime", "Lifetime", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnName("CreatedAt")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnName("DeletedAt")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnName("ModifiedAt")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecast");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
